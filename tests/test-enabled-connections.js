const API_BASE_URL = 'http://localhost:5000/api';

async function makeRequest(url, options = {}) {
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    ...options
  });
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  return response.json();
}

async function testEnabledConnections() {
  try {
    console.log('üß™ Test de la fonctionnalit√© d\'activation/d√©sactivation des connexions...\n');

    // 1. R√©cup√©rer toutes les connexions
    console.log('1. R√©cup√©ration de toutes les connexions...');
    const allConnections = await makeRequest(`${API_BASE_URL}/connections`);
    console.log(`   ‚úÖ ${allConnections.length} connexions trouv√©es\n`);

    if (allConnections.length === 0) {
      console.log('   ‚ö†Ô∏è  Aucune connexion trouv√©e. Cr√©ez d\'abord une connexion de test.');
      return;
    }

    // 2. R√©cup√©rer seulement les connexions activ√©es
    console.log('2. R√©cup√©ration des connexions activ√©es...');
    const activeConnections = await makeRequest(`${API_BASE_URL}/connections/active`);
    console.log(`   ‚úÖ ${activeConnections.length} connexions activ√©es trouv√©es\n`);

    // 3. Tester le basculement d'une connexion
    const testConnection = allConnections[0];
    console.log(`3. Test du basculement pour la connexion: ${testConnection.name}`);
    console.log(`   √âtat initial: ${testConnection.enabled ? 'Activ√©e' : 'D√©sactiv√©e'}`);

    // Basculement
    const toggleResponse = await makeRequest(`${API_BASE_URL}/connections/${testConnection.id}/toggle`, {
      method: 'PATCH'
    });
    const newState = toggleResponse.enabled;
    console.log(`   ‚úÖ Nouvel √©tat: ${newState ? 'Activ√©e' : 'D√©sactiv√©e'}`);

    // V√©rifier que le basculement a fonctionn√©
    if (newState !== testConnection.enabled) {
      console.log('   ‚úÖ Basculement r√©ussi !');
    } else {
      console.log('   ‚ùå Erreur: le basculement n\'a pas fonctionn√©');
    }

    // 4. V√©rifier que la recherche ne prend en compte que les connexions activ√©es
    console.log('\n4. Test de la recherche avec connexions activ√©es/d√©sactiv√©es...');
    
    // Compter les connexions activ√©es apr√®s le basculement
    const updatedActiveConnections = await makeRequest(`${API_BASE_URL}/connections/active`);
    console.log(`   ‚úÖ ${updatedActiveConnections.length} connexions activ√©es apr√®s basculement`);

    // 5. Remettre la connexion dans son √©tat initial
    console.log('\n5. Remise en √©tat initial...');
    await makeRequest(`${API_BASE_URL}/connections/${testConnection.id}/toggle`, {
      method: 'PATCH'
    });
    console.log('   ‚úÖ √âtat initial restaur√©');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('   - Les connexions peuvent √™tre activ√©es/d√©sactiv√©es');
    console.log('   - La recherche ne prend en compte que les connexions activ√©es');
    console.log('   - L\'interface affiche clairement l\'√©tat des connexions');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

testEnabledConnections(); 